"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[680],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>c});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),d=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=d(e.components);return a.createElement(p.Provider,{value:t},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),s=d(n),g=r,c=s["".concat(p,".").concat(g)]||s[g]||u[g]||i;return n?a.createElement(c,o(o({ref:t},m),{},{components:n})):a.createElement(c,o({ref:t},m))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=g;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[s]="string"==typeof e?e:r,o[1]=l;for(var d=2;d<i;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},4877:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var a=n(7462),r=(n(7294),n(3905));const i={},o="Embedding",l={unversionedId:"modules/Embedding",id:"modules/Embedding",title:"Embedding",description:"The Embedding module uses Rocksdb to store the values of Embedding, which is KV format. The Key of feature is uint64t type, the value is a list of floating point numbers and some other values.",source:"@site/docs/modules/Embedding.md",sourceDirName:"modules",slug:"/modules/Embedding",permalink:"/damo-embedding/docs/modules/Embedding",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/modules/Embedding.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Counting Bloom Filter",permalink:"/damo-embedding/docs/modules/CBF"},next:{title:"Initializer",permalink:"/damo-embedding/docs/modules/Initializer"}},p={},d=[{value:"Key and Group",id:"key-and-group",level:2},{value:"Value",id:"value",level:2},{value:"TTL",id:"ttl",level:2},{value:"Usage",id:"usage",level:2},{value:"How to Create an Embedding",id:"how-to-create-an-embedding",level:3},{value:"Member Functions of Embedding",id:"member-functions-of-embedding",level:3},{value:"lookup: pull weight from embedding",id:"lookup-pull-weight-from-embedding",level:4},{value:"apply_gradients: push gradients to embedding",id:"apply_gradients-push-gradients-to-embedding",level:4}],m={toc:d},s="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(s,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"embedding"},"Embedding"),(0,r.kt)("p",null,"The Embedding module uses Rocksdb to store the values of Embedding, which is KV format. The Key of feature is u_int64_t type, the value is a list of floating point numbers and some other values."),(0,r.kt)("h2",{id:"key-and-group"},"Key and Group"),(0,r.kt)("p",null,"All features are discretization and represented by the unique u_int64_t value. We use group to represent the same type of features.Different group can have different optimizer, initializer and dimension."),(0,r.kt)("h2",{id:"value"},"Value"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"struct MetaData {\n    int group; \n    u_int64_t key;     // original key, not group-masked key\n    u_int64_t update_time;\n    u_int64_t update_num;\n    float data[];\n};\n")),(0,r.kt)("h2",{id:"ttl"},"TTL"),(0,r.kt)("p",null,"For some features that have not been updated for a long time, they can be deleted by setting TTL, which is supported by Rocksdb itself. This action can reduce the size of the model."),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("h3",{id:"how-to-create-an-embedding"},"How to Create an Embedding"),(0,r.kt)("p",null,"The arguments are listed below:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"storage"),": damo.PyStorage type")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"optimizer"),": damo.PyOptimizer type")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"initializer"),": damo.PyInitializer type")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"dimension"),": int type, dim of embedding")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"group"),": int type, [0, 256), defaul: 0"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import damo\nstorage = damo.PyStorage(...)\noptimizer = damo.PyOptimizer(...)\ninitializer = damo.PyInitializer(...)\ndimension = 16\ngroup = 1\nembedding = damo.PyEmbedding(storage, optimizer, initializer, dimension, group)\n")),(0,r.kt)("h3",{id:"member-functions-of-embedding"},"Member Functions of Embedding"),(0,r.kt)("p",null,"There are two member functions of embedding, both have no return values, which are listed below:"),(0,r.kt)("h4",{id:"lookup-pull-weight-from-embedding"},"lookup: pull weight from embedding"),(0,r.kt)("p",null,"The arguments are listed below:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"keys: numpy.ndarray type, one dimension, dtype MUST BE np.uint64")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"weights: numpy.ndarray type, one dimension"),(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"dtype MUST BE np.float32")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"$size == embedding","_","dimension * keys.shape","[0]","$"))),(0,r.kt)("p",{parentName:"li"},"We will store the result in this space. "))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import numpy as np\n\n# example\nn = 8\nkeys = np.zeros(n).astype(np.uint64)\nfor i in range(n):\n    keys[i] = i+1\n\n# array([1, 2, 3, 4, 5, 6, 7, 8], dtype=uint64)\n\nweight = np.zeros(n*dimension).astype(np.float32)\n\nembedding.lookup(keys, weight)\n\n# IT IS Easy To Extract Each Key's Weight\ntmp = weight.reshape((n, dimension))\nweight_dict = {k: v for k,v in zip(keys, tmp)}\n")),(0,r.kt)("h4",{id:"apply_gradients-push-gradients-to-embedding"},"apply_gradients: push gradients to embedding"),(0,r.kt)("p",null,"The arguments are listed below:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"keys: same as lookup, numpy.ndarray type, one dimension, dtype MUST BE np.uint64")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"gradients: numpy.ndarray type, one dimension, dtype MUST BE np.float32 type, "),(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"dtype MUST BE np.float32")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"$size == embedding","_","dimension * keys.shape","[0]","$"))))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import numpy as np\n\ngradients = np.random.random(n*dimension).astype(np.float32)\n\nembedding.apply_gradients(keys, gradients)\n")))}u.isMDXComponent=!0}}]);