# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pyEmbedding
else:
    import _pyEmbedding

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class Parameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    params_ = property(_pyEmbedding.Parameters_params__get, _pyEmbedding.Parameters_params__set)

    def __init__(self, *args):
        _pyEmbedding.Parameters_swiginit(self, _pyEmbedding.new_Parameters(*args))
    __swig_destroy__ = _pyEmbedding.delete_Parameters

    def insert(self, *args):
        return _pyEmbedding.Parameters_insert(self, *args)

# Register Parameters in _pyEmbedding:
_pyEmbedding.Parameters_swigregister(Parameters)

class PyInitializer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyEmbedding.PyInitializer_swiginit(self, _pyEmbedding.new_PyInitializer(*args))

    def call(self, w):
        return _pyEmbedding.PyInitializer_call(self, w)
    __swig_destroy__ = _pyEmbedding.delete_PyInitializer

# Register PyInitializer in _pyEmbedding:
_pyEmbedding.PyInitializer_swigregister(PyInitializer)

class PyOptimizer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyEmbedding.PyOptimizer_swiginit(self, _pyEmbedding.new_PyOptimizer(*args))

    def call(self, w, gds, global_step):
        return _pyEmbedding.PyOptimizer_call(self, w, gds, global_step)
    __swig_destroy__ = _pyEmbedding.delete_PyOptimizer

# Register PyOptimizer in _pyEmbedding:
_pyEmbedding.PyOptimizer_swigregister(PyOptimizer)

class PyFilter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyEmbedding.PyFilter_swiginit(self, _pyEmbedding.new_PyFilter(*args))

    def check(self, key):
        return _pyEmbedding.PyFilter_check(self, key)

    def add(self, key, num):
        return _pyEmbedding.PyFilter_add(self, key, num)
    __swig_destroy__ = _pyEmbedding.delete_PyFilter

# Register PyFilter in _pyEmbedding:
_pyEmbedding.PyFilter_swigregister(PyFilter)

class PyEmbeddingFactory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyEmbedding.PyEmbeddingFactory_swiginit(self, _pyEmbedding.new_PyEmbeddingFactory(*args))
    __swig_destroy__ = _pyEmbedding.delete_PyEmbeddingFactory

    def dump(self, path, expires):
        return _pyEmbedding.PyEmbeddingFactory_dump(self, path, expires)

# Register PyEmbeddingFactory in _pyEmbedding:
_pyEmbedding.PyEmbeddingFactory_swigregister(PyEmbeddingFactory)

class PyEmbedding(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyEmbedding.PyEmbedding_swiginit(self, _pyEmbedding.new_PyEmbedding(*args))
    __swig_destroy__ = _pyEmbedding.delete_PyEmbedding

    def lookup(self, keys, w):
        return _pyEmbedding.PyEmbedding_lookup(self, keys, w)

    def apply_gradients(self, keys, gds, global_step):
        return _pyEmbedding.PyEmbedding_apply_gradients(self, keys, gds, global_step)

# Register PyEmbedding in _pyEmbedding:
_pyEmbedding.PyEmbedding_swigregister(PyEmbedding)



