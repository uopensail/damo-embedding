// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.2
// source: api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DamoEmbedding_Call_FullMethodName = "/api.DamoEmbedding/Call"
)

// DamoEmbeddingClient is the client API for DamoEmbedding service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DamoEmbeddingClient interface {
	Call(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type damoEmbeddingClient struct {
	cc grpc.ClientConnInterface
}

func NewDamoEmbeddingClient(cc grpc.ClientConnInterface) DamoEmbeddingClient {
	return &damoEmbeddingClient{cc}
}

func (c *damoEmbeddingClient) Call(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, DamoEmbedding_Call_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DamoEmbeddingServer is the server API for DamoEmbedding service.
// All implementations must embed UnimplementedDamoEmbeddingServer
// for forward compatibility
type DamoEmbeddingServer interface {
	Call(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedDamoEmbeddingServer()
}

// UnimplementedDamoEmbeddingServer must be embedded to have forward compatible implementations.
type UnimplementedDamoEmbeddingServer struct {
}

func (UnimplementedDamoEmbeddingServer) Call(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (UnimplementedDamoEmbeddingServer) mustEmbedUnimplementedDamoEmbeddingServer() {}

// UnsafeDamoEmbeddingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DamoEmbeddingServer will
// result in compilation errors.
type UnsafeDamoEmbeddingServer interface {
	mustEmbedUnimplementedDamoEmbeddingServer()
}

func RegisterDamoEmbeddingServer(s grpc.ServiceRegistrar, srv DamoEmbeddingServer) {
	s.RegisterService(&DamoEmbedding_ServiceDesc, srv)
}

func _DamoEmbedding_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DamoEmbeddingServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DamoEmbedding_Call_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DamoEmbeddingServer).Call(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// DamoEmbedding_ServiceDesc is the grpc.ServiceDesc for DamoEmbedding service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DamoEmbedding_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.DamoEmbedding",
	HandlerType: (*DamoEmbeddingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Call",
			Handler:    _DamoEmbedding_Call_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
